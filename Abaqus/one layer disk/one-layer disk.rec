# -*- coding: mbcs -*-
from part import *
from material import *
from section import *
from assembly import *
from step import *
from interaction import *
from load import *
from mesh import *
from optimization import *
from job import *
from sketch import *
from visualization import *
from connectorBehavior import *
mdb.models['thermal'].parts['thermal'].generateMesh()
mdb.models['thermal'].parts['thermal'].deleteMesh()
mdb.models['thermal'].parts['thermal'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.02)
mdb.models['thermal'].parts['thermal'].generateMesh()
mdb.models['thermal'].parts['thermal'].deleteMesh()
mdb.models['thermal'].parts['thermal'].seedPart(deviationFactor=0.1, 
    minSizeFactor=0.1, size=0.01)
mdb.models['thermal'].parts['thermal'].generateMesh()
mdb.customData.am.amModels['AM-Model-1'].addTableCollection(tableCollectionName='ABQ_AM_Table Collection-1')
mdb.customData.am.amModels['AM-Model-1'].dataSetup.tableCollections['ABQ_AM_Table Collection-1'].ParameterTable(name='_parameterTable_"ABQ_AM.MaterialDeposition.Bead"_', parameterTabletype='"ABQ_AM.MaterialDeposition.Bead"', parameterData=(('Z', 0.00115, 0.02, 0.005, 'Below'),))
mdb.customData.am.amModels['AM-Model-1'].dataSetup.tableCollections['ABQ_AM_Table Collection-1'].ParameterTable(name='_parameterTable_"ABQ_AM.MaterialDeposition"_', parameterTabletype='"ABQ_AM.MaterialDeposition"', parameterData=(('material path', 'Bead'),))
mdb.customData.am.amModels['AM-Model-1'].addTableCollection(tableCollectionName='ABQ_AM_heat')
mdb.customData.am.amModels['AM-Model-1'].dataSetup.tableCollections['ABQ_AM_heat'].PropertyTable(name='_propertyTable_"ABQ_AM.AbsorptionCoeff"_', propertyTableType='"ABQ_AM.AbsorptionCoeff"', propertyTableData=((0.9,),), numDependencies=0, temperatureDependency=OFF)
mdb.customData.am.amModels['AM-Model-1'].dataSetup.tableCollections['ABQ_AM_heat'].ParameterTable(name='_parameterTable_"ABQ_AM.MovingHeatSource"_', parameterTabletype='"ABQ_AM.MovingHeatSource"', parameterData=(('heat pathj', 'Goldak'),))
mdb.customData.am.amModels['AM-Model-1'].dataSetup.tableCollections['ABQ_AM_heat'].ParameterTable(name='_parameterTable_"ABQ_AM.MovingHeatSource.Goldak"_', parameterTabletype='"ABQ_AM.MovingHeatSource.Goldak"', parameterData=(('9', '9', '9', 0.005, 0.0023, 0.002, 0.004, 0.6, 1.4, 1),))
mdb.customData.am.amModels['AM-Model-1'].dataSetup.tableCollections['ABQ_AM_heat'].ParameterTable(name='_parameterTable_"ABQ_AM.MovingHeatSource.Advanced"_', parameterTabletype='"ABQ_AM.MovingHeatSource.Advanced"', parameterData=(('False', 'False', 'Relative', 0.0, 0.0, -1.0, 1.0),))
mdb.models['thermal'].rootAssembly.regenerate()
mdb.models['thermal'].rootAssembly.Set(elements=
    mdb.models['thermal'].rootAssembly.instances['thermal-1'].elements.getSequenceFromMask(
    mask=('[#ffffffff #f ]', ), ), name='Set-2')
mdb.models['thermal'].rootAssembly.Set(elements=
    mdb.models['thermal'].rootAssembly.instances['thermal-1'].elements.getSequenceFromMask(
    mask=('[#ffffffff #f ]', ), ), name='Set-3')
mdb.models['thermal'].rootAssembly.sets.changeKey(fromName='Set-3', toName=
    'addelement')
mdb.models['thermal'].rootAssembly.Set(elements=
    mdb.models['thermal'].rootAssembly.instances['thermal-1'].elements, name=
    '_AM-Model-1__AllBuildParts__')
mdb.Job(atTime=None, contactPrint=OFF, description='', echoPrint=OFF, 
    explicitPrecision=SINGLE, getMemoryFromAnalysis=True, historyPrint=OFF, 
    memory=90, memoryUnits=PERCENTAGE, model='thermal', modelPrint=OFF, 
    multiprocessingMode=DEFAULT, name='Job-1', nodalOutputPrecision=SINGLE, 
    numCpus=2, numDomains=2, numGPUs=0, queue=None, resultsFormat=ODB, scratch=
    '', type=ANALYSIS, userSubroutine='', waitHours=0, waitMinutes=0)
mdb.models['thermal'].HistoryOutputRequest(createStepName='heat', name=
    'H-Output-1', variables=('FTEMP', 'HFLA', 'HTL', 'HTLA', 'RADFL', 'RADFLA', 
    'RADTL', 'RADTLA', 'VFTOT', 'SJD', 'SJDA', 'SJDT', 'SJDTA', 'WEIGHT'))
mdb.models['thermal'].fieldOutputRequests['F-Output-1'].setValuesInStep(
    stepName='cooling', variables=('NT', 'TEMP'))
mdb.models['thermal'].fieldOutputRequests['F-Output-1'].setValues(variables=(
    'NT', 'TEMP'))
mdb.models['thermal'].fieldOutputRequests['F-Output-1'].setValues(variables=(
    'NT', 'TEMP', 'FTEMP', 'HFL', 'HFLA', 'HTL', 'HTLA', 'RFLE', 'RFL', 'CFL', 
    'NFLUX', 'RADFL', 'RADFLA', 'RADTL', 'RADTLA', 'VFTOT', 'SJD', 'SJDA', 
    'SJDT', 'SJDTA', 'WEIGHT', 'FLUXS', 'HBF', 'FILMCOEF', 'SINKTEMP'))
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'iktutlaan12', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'STRESS-DISPLACEMENT ELEMENTS OR OTHER ELEMENTS WITHOUT TEMPERATURE DEGREE OF FREEDOM ARE NOT ALLOWED IN A HEAT TRANSFER ANALYSIS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'Job-1'})
mdb.Text(anchor=(0.0, 0.05, 0.020575), color='Yellow', name='AM_ES_Arr__start', 
    text='Event Start-> time = 0.0')
mdb.Text(anchor=(0.03, 0.05, 0.020575), color='Yellow', name='AM_ES_Arr__end', 
    text='Event End -> time = 0.5')
mdb.Text(anchor=(0.0, 0.05, 0.020575), color='Yellow', name='AM_ES_Arr__start', 
    text='Event Start-> time = 0.0')
mdb.Text(anchor=(0.06, 0.03, 0.020575), color='Yellow', name='AM_ES_Arr__end', 
    text='Event End -> time = 5')
mdb.Text(anchor=(0.0, 0.05, 0.020575), color='Yellow', name='AM_ES_Arr__start', 
    text='Event Start-> time = 0.0')
mdb.Text(anchor=(0.06, 0.05, 0.020575), color='Yellow', name='AM_ES_Arr__end', 
    text='Event End -> time = 1')
mdb.Text(anchor=(0.0, 0.05, 0.020575), color='Yellow', name='AM_ES_Arr__start', 
    text='Event Start-> time = 0.0')
mdb.Text(anchor=(0.0, 0.03, 0.020575), color='Yellow', name='AM_ES_Arr__end', 
    text='Event End -> time = 2')
mdb.Text(anchor=(0.0, 0.05, 0.020575), color='Yellow', name='AM_ES_Arr__start', 
    text='Event Start-> time = 0.0')
mdb.Text(anchor=(0.06, 0.03, 0.020575), color='Yellow', name='AM_ES_Arr__end', 
    text='Event End -> time = 3')
mdb.Text(anchor=(0.0, 0.05, 0.020575), color='Yellow', name='AM_ES_Arr__start', 
    text='Event Start-> time = 0.0')
mdb.Text(anchor=(0.0, 0.01, 0.020575), color='Yellow', name='AM_ES_Arr__end', 
    text='Event End -> time = 4')
mdb.Text(anchor=(0.0, 0.05, 0.020575), color='Yellow', name='AM_ES_Arr__start', 
    text='Event Start-> time = 0.0')
mdb.Text(anchor=(0.06, 0.03, 0.020575), color='Yellow', name='AM_ES_Arr__end', 
    text='Event End -> time = 5')
mdb.Text(anchor=(0.0, 0.05, 0.020575), color='Yellow', name='AM_ES_Arr__start', 
    text='Event Start-> time = 0.0')
mdb.Text(anchor=(0.06, 0.03, 0.020575), color='Yellow', name='AM_ES_Arr__end', 
    text='Event End -> time = 5')
mdb.Text(anchor=(0.0, 0.05, 0.020575), color='Yellow', name='AM_ES_Arr__start', 
    text='Event Start-> time = 0.0')
mdb.Text(anchor=(0.06, 0.01, 0.020575), color='Yellow', name='AM_ES_Arr__end', 
    text='Event End -> time = 5')
del mdb.annotations['AM_ES_Arr__end']
del mdb.annotations['AM_ES_Arr__start']
mdb.jobs['Job-1'].submit(consistencyChecking=OFF)
mdb.jobs['Job-1']._Message(STARTED, {'phase': BATCHPRE_PHASE, 
    'clientHost': 'iktutlaan12', 'handle': 0, 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {'phase': BATCHPRE_PHASE, 
    'message': 'STRESS-DISPLACEMENT ELEMENTS OR OTHER ELEMENTS WITHOUT TEMPERATURE DEGREE OF FREEDOM ARE NOT ALLOWED IN A HEAT TRANSFER ANALYSIS', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ABORTED, {'phase': BATCHPRE_PHASE, 
    'message': 'Analysis phase failed due to errors', 'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(ERROR, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'Job-1'})
mdb.jobs['Job-1']._Message(JOB_ABORTED, {
    'message': 'Analysis Input File Processor exited with an error.', 
    'jobName': 'Job-1'})
